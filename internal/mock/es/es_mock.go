// Code generated by MockGen. DO NOT EDIT.
// Source: infra/contract/es/es.go

// Package es is a generated GoMock package.
package es

import (
	context "context"
	reflect "reflect"

	es "github.com/me2seeks/forge/infra/contract/es"

	gomock "github.com/golang/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockClient) Create(ctx context.Context, index, id string, document any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, index, id, document)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockClientMockRecorder) Create(ctx, index, id, document any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockClient)(nil).Create), ctx, index, id, document)
}

// CreateIndex mocks base method.
func (m *MockClient) CreateIndex(ctx context.Context, index string, properties map[string]any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIndex", ctx, index, properties)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateIndex indicates an expected call of CreateIndex.
func (mr *MockClientMockRecorder) CreateIndex(ctx, index, properties any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIndex", reflect.TypeOf((*MockClient)(nil).CreateIndex), ctx, index, properties)
}

// Delete mocks base method.
func (m *MockClient) Delete(ctx context.Context, index, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, index, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockClientMockRecorder) Delete(ctx, index, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockClient)(nil).Delete), ctx, index, id)
}

// DeleteIndex mocks base method.
func (m *MockClient) DeleteIndex(ctx context.Context, index string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteIndex", ctx, index)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteIndex indicates an expected call of DeleteIndex.
func (mr *MockClientMockRecorder) DeleteIndex(ctx, index any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIndex", reflect.TypeOf((*MockClient)(nil).DeleteIndex), ctx, index)
}

// Exists mocks base method.
func (m *MockClient) Exists(ctx context.Context, index string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", ctx, index)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockClientMockRecorder) Exists(ctx, index any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockClient)(nil).Exists), ctx, index)
}

// NewBulkIndexer mocks base method.
func (m *MockClient) NewBulkIndexer(index string) (es.BulkIndexer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewBulkIndexer", index)
	ret0, _ := ret[0].(es.BulkIndexer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewBulkIndexer indicates an expected call of NewBulkIndexer.
func (mr *MockClientMockRecorder) NewBulkIndexer(index any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewBulkIndexer", reflect.TypeOf((*MockClient)(nil).NewBulkIndexer), index)
}

// Search mocks base method.
func (m *MockClient) Search(ctx context.Context, index string, req *es.Request) (*es.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", ctx, index, req)
	ret0, _ := ret[0].(*es.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockClientMockRecorder) Search(ctx, index, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockClient)(nil).Search), ctx, index, req)
}

// Types mocks base method.
func (m *MockClient) Types() es.Types {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Types")
	ret0, _ := ret[0].(es.Types)
	return ret0
}

// Types indicates an expected call of Types.
func (mr *MockClientMockRecorder) Types() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Types", reflect.TypeOf((*MockClient)(nil).Types))
}

// Update mocks base method.
func (m *MockClient) Update(ctx context.Context, index, id string, document any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, index, id, document)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockClientMockRecorder) Update(ctx, index, id, document any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockClient)(nil).Update), ctx, index, id, document)
}

// MockTypes is a mock of Types interface.
type MockTypes struct {
	ctrl     *gomock.Controller
	recorder *MockTypesMockRecorder
}

// MockTypesMockRecorder is the mock recorder for MockTypes.
type MockTypesMockRecorder struct {
	mock *MockTypes
}

// NewMockTypes creates a new mock instance.
func NewMockTypes(ctrl *gomock.Controller) *MockTypes {
	mock := &MockTypes{ctrl: ctrl}
	mock.recorder = &MockTypesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTypes) EXPECT() *MockTypesMockRecorder {
	return m.recorder
}

// NewLongNumberProperty mocks base method.
func (m *MockTypes) NewLongNumberProperty() any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewLongNumberProperty")
	ret0, _ := ret[0].(any)
	return ret0
}

// NewLongNumberProperty indicates an expected call of NewLongNumberProperty.
func (mr *MockTypesMockRecorder) NewLongNumberProperty() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewLongNumberProperty", reflect.TypeOf((*MockTypes)(nil).NewLongNumberProperty))
}

// NewTextProperty mocks base method.
func (m *MockTypes) NewTextProperty() any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewTextProperty")
	ret0, _ := ret[0].(any)
	return ret0
}

// NewTextProperty indicates an expected call of NewTextProperty.
func (mr *MockTypesMockRecorder) NewTextProperty() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewTextProperty", reflect.TypeOf((*MockTypes)(nil).NewTextProperty))
}

// NewUnsignedLongNumberProperty mocks base method.
func (m *MockTypes) NewUnsignedLongNumberProperty() any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewUnsignedLongNumberProperty")
	ret0, _ := ret[0].(any)
	return ret0
}

// NewUnsignedLongNumberProperty indicates an expected call of NewUnsignedLongNumberProperty.
func (mr *MockTypesMockRecorder) NewUnsignedLongNumberProperty() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewUnsignedLongNumberProperty", reflect.TypeOf((*MockTypes)(nil).NewUnsignedLongNumberProperty))
}

// MockBulkIndexer is a mock of BulkIndexer interface.
type MockBulkIndexer struct {
	ctrl     *gomock.Controller
	recorder *MockBulkIndexerMockRecorder
}

// MockBulkIndexerMockRecorder is the mock recorder for MockBulkIndexer.
type MockBulkIndexerMockRecorder struct {
	mock *MockBulkIndexer
}

// NewMockBulkIndexer creates a new mock instance.
func NewMockBulkIndexer(ctrl *gomock.Controller) *MockBulkIndexer {
	mock := &MockBulkIndexer{ctrl: ctrl}
	mock.recorder = &MockBulkIndexerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBulkIndexer) EXPECT() *MockBulkIndexerMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockBulkIndexer) Add(ctx context.Context, item es.BulkIndexerItem) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, item)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockBulkIndexerMockRecorder) Add(ctx, item any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockBulkIndexer)(nil).Add), ctx, item)
}

// Close mocks base method.
func (m *MockBulkIndexer) Close(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockBulkIndexerMockRecorder) Close(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockBulkIndexer)(nil).Close), ctx)
}
